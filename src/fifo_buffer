`timescale 1ns / 1ps

//////////////////////////////////////////////////////////////////////////////////
// Module: fifo_buffer
// Description: Bộ nhớ FIFO để lưu trữ dữ liệu 16-bit từ cảm biến MAX30100.
//              Được đồng bộ với clock 1MHz từ clk_divider.
//////////////////////////////////////////////////////////////////////////////////

module fifo_buffer #(
    parameter DATA_WIDTH = 16,   // Độ rộng dữ liệu (16-bit cho MAX30100)
    parameter FIFO_DEPTH = 256   // Độ sâu FIFO (số phần tử tối đa)
)(
    input  wire                    clk,       // Clock hệ thống (100 MHz)
    input  wire                    reset,     // Reset đồng bộ (active high)
    input  wire                    wr_en,     // Ghi dữ liệu vào FIFO
    input  wire                    rd_en,     // Đọc dữ liệu từ FIFO
    input  wire [DATA_WIDTH-1:0]    data_in,   // Dữ liệu đầu vào
    output reg  [DATA_WIDTH-1:0]    data_out,  // Dữ liệu đầu ra
    output wire                     empty,     // Cờ báo FIFO rỗng
    output wire                     full       // Cờ báo FIFO đầy
);

    // Tín hiệu clock 1MHz từ clk_divider
    wire clk_1MHz;
    
    // Gọi module clk_divider để tạo clock 1MHz từ clock hệ thống 100MHz
    clk_divider #(
        .input_clk_freq(100_000_000),  // Clock đầu vào 100 MHz
        .output_clk_freq(1_000_000)    // Clock đầu ra 1 MHz
    ) clk_div_inst (
        .clk(clk),
        .clk_1MHz(clk_1MHz)
    );

    // Bộ nhớ FIFO lưu trữ dữ liệu
    reg [DATA_WIDTH-1:0] fifo_mem [0:FIFO_DEPTH-1];
    reg [$clog2(FIFO_DEPTH)-1:0] write_ptr;  // Con trỏ ghi
    reg [$clog2(FIFO_DEPTH)-1:0] read_ptr;   // Con trỏ đọc
    reg [$clog2(FIFO_DEPTH):0] fifo_count;   // Bộ đếm phần tử trong FIFO

    // FIFO đầy khi số phần tử đạt giới hạn
    assign full  = (fifo_count == FIFO_DEPTH);
    // FIFO rỗng khi không có phần tử nào
    assign empty = (fifo_count == 0);

    // Ghi dữ liệu vào FIFO (đồng bộ với clk_1MHz)
    always @(posedge clk_1MHz or posedge reset) begin
        if (reset) begin
            write_ptr  <= 0;
            fifo_count <= 0;
        end else if (wr_en && !full) begin
            fifo_mem[write_ptr] <= data_in;
            write_ptr <= write_ptr + 1;
            fifo_count <= fifo_count + 1;
        end
    end

    // Đọc dữ liệu từ FIFO (đồng bộ với clk_1MHz)
    always @(posedge clk_1MHz or posedge reset) begin
        if (reset) begin
            read_ptr   <= 0;
            fifo_count <= 0;
            data_out   <= 0;
        end else if (rd_en && !empty) begin
            data_out <= fifo_mem[read_ptr];
            read_ptr <= read_ptr + 1;
            fifo_count <= fifo_count - 1;
        end
    end

endmodule

